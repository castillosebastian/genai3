import unittest
import sys
import os
import asyncio
from dotenv import load_dotenv
load_dotenv()
root_dir = os.getenv("ROOT")
sys.path.insert(0, root_dir)
from plugins.AISearch.vsearch import VSearch

class TestVSearch(unittest.TestCase):
    def setUp(self):
        self.vsearch = VSearch()
        self.loop = asyncio.get_event_loop()

    entity_recognition= False
    
    if (entity_recognition):
        def test_extract_entities(self):
            # List of test questions
            questions = [
                    "What was the annual revenue of 3M Company in the USA for the fiscal year 2021?",
                    "How did Abbott Laboratories perform in the German market during the second quarter of 2022?",
                    "What were the research and development expenses of AbbVie Inc. in Canada in 2020?",
                    "Can you provide the net income figures for Bausch + Lomb Corporation in France for 2019?",
                    "What was Baxter International's market share in India in the medical devices sector in 2021?",
                    "How many new patents were filed by BeiGene in China during 2023?",
                    "What was the total debt of Biogen Inc. in the UK as of the end of 2022?",
                    "Can you report the earnings per share for Bio-Rad Laboratories in the Australian market for the year 2021?",
                    "What was the gross profit margin of Boston Scientific Corporation in Brazil in 2020?",
                    "How did Bristol-Myers Squibb's sales in Japan change from 2021 to 2022?",
                    "What was the total revenue generated by DexCom in the South African market in 2021?",
                    "Can you provide Ecolab's operating income in Mexico for the fiscal year 2022?",
                    "What was the market capitalization of Edgewell Personal Care in Italy as of 2023?",
                    "How many new drug approvals did Eli Lilly receive in Spain during 2021?",
                    "What was the total asset value of Enovis Corporation in Russia for the year 2020?",
                    "Can you provide the number of employees for General Electric in the USA as of 2023?",
                    "What was the dividend yield of Honeywell International in the UK in 2021?",
                    "How did Humana's health insurance plans perform in the Canadian market in 2022?",
                    "What was the export volume of ICU Medical products to Japan in 2020?",
                    "Can you detail the innovation investments made by Illumina in Germany during 2019?",
                    "What was the impact of Johnson & Johnson's new product launches in India on its 2021 Q3 earnings?",
                    "How did Merck's pharmaceutical sales in Brazil fluctuate in 2022?",
                    "What was the effect of currency fluctuations on Mondelez's revenue in the European market in 2020?",
                    "Can you report on Perrigo's expansion strategy in the Chinese market for 2021?",
                    "How did Pfizer's vaccine sales contribute to its total revenue in the USA in 2022?",
                    "What was Seagen's investment in oncology research in France during 2021?",
                    "Can you analyze the growth rate of Teleflex's surgical products in the Italian market in 2020?",
                    "What was the impact of regulatory changes on Teva Pharmaceutical's operations in Germany in 2019?",
                    "What was the effect of market trends on The Cooper Companies' sales in Spain during 2020?",
                    "How did The Estee Lauder Companies' cosmetic sales perform in the UK in 2021?",
                    "What was the revenue growth of The Hain Celestial Group in the Canadian natural foods market in 2022?",
                    "Can you provide The Hershey Company's chocolate sales figures in the USA for Valentine's Day 2021?",
                    "What was the profit margin of The Procter & Gamble Company in the Chinese market during the fiscal year 2020?",
                    "How did Thermo Fisher Scientific's laboratory equipment sales fare in the Japanese market in 2022?",
                    "What was the revenue from United Therapeutics Corporation's pulmonary treatments in Italy in 2021?",
                    "Can you evaluate UnitedHealth Group's healthcare service expansion in Brazil in 2023?",
                    "What was the performance of Vertex Pharmaceuticals' new drug launches in the German market in 2020?",
                    "How did Viatris Inc. perform in the Australian pharmaceutical market after its recent merger in 2021?"
                ]

            """
            Extraction results:
            {'ticker': ['MMM'], 'country': ['US'], 'dates': ['2021-01-01', '2021-12-31']}
            {'ticker': ['ABT'], 'country': ['DE'], 'dates': ['2022-04-01', '2022-06-30']}
            {'ticker': ['ABBV'], 'country': ['CA'], 'dates': ['2020-01-01', '2020-12-31']}
            {'ticker': ['BHC'], 'country': ['FR'], 'dates': ['2019-01-01', '2019-12-31']}
            {'ticker': ['BAX'], 'country': ['IN'], 'dates': ['2021-01-01', '2021-12-31']}
            {'ticker': ['BGNE'], 'country': ['CN'], 'dates': ['2023-01-01', '2023-12-31']}
            {'ticker': ['BIIB'], 'country': ['UK'], 'dates': ['2022-12-31', '2022-12-31']}
            {'ticker': ['BIO'], 'country': ['AU'], 'dates': ['2021-01-01', '2021-12-31']}
            {'ticker': ['BSX'], 'country': ['BR'], 'dates': ['2020-01-01', '2020-12-31']}
            {'ticker': ['BMY'], 'country': ['JP'], 'dates': ['2021-01-01', '2022-12-31']}
            {'ticker': ['DXCM'], 'country': ['ZA'], 'dates': ['2021-01-01', '2021-12-31']}
            {'ticker': ['ECL'], 'country': ['MX'], 'dates': ['2022-01-01', '2022-12-31']}
            {'ticker': ['EPC'], 'country': ['IT'], 'dates': ['2023-01-01', '2023-12-31']}
            {'ticker': ['LLY'], 'country': ['ES'], 'dates': ['2021-01-01', '2021-12-31']}
            {'ticker': ['ENV'], 'country': ['RU'], 'dates': ['2020-01-01', '2020-12-31']}
            {'ticker': ['GE'], 'country': ['US'], 'dates': ['2023-01-01', '2023-12-31']}
            {'ticker': ['HON'], 'country': ['UK'], 'dates': ['2021-01-01', '2021-12-31']}
            {'ticker': ['HUM'], 'country': ['CA'], 'dates': ['2022-01-01', '2022-12-31']}
            {'ticker': None, 'country': ['JP'], 'dates': ['2020-01-01', '2020-12-31']}
            {'ticker': ['ILMN'], 'country': ['DE'], 'dates': ['2019-01-01', '2019-12-31']}
            {'ticker': ['JNJ'], 'country': ['IN'], 'dates': ['2021-07-01', '2021-09-30']}
            {'ticker': ['MRK'], 'country': ['BR'], 'dates': ['2022-01-01', '2022-12-31']}
            {'ticker': ['MDLZ'], 'country': ['EU'], 'dates': ['2020-01-01', '2020-12-31']}
            {'ticker': ['PRGO'], 'country': ['CN'], 'dates': ['2021-01-01', '2021-12-31']}
            {'ticker': ['PFE'], 'country': ['US'], 'dates': ['2022-01-01', '2022-12-31']}
            {'ticker': ['SGEN'], 'country': ['FR'], 'dates': ['2021-01-01', '2021-12-31']}
            {'ticker': ['TFX'], 'country': ['IT'], 'dates': ['2020-01-01', '2020-12-31']}
            {'ticker': ['TEVA'], 'country': ['DE'], 'dates': ['2019-01-01', '2019-12-31']}
            {'ticker': ['COO'], 'country': ['ES'], 'dates': ['2020-01-01', '2020-12-31']}
            {'ticker': ['EL'], 'country': ['UK'], 'dates': ['2021-01-01', '2021-12-31']}
            {'ticker': ['HAIN'], 'country': ['CA'], 'dates': ['2022-01-01', '2022-12-31']}
            {'ticker': ['HSY'], 'country': ['US'], 'dates': ['2021-02-14', '2021-02-14']}
            {'ticker': ['PG'], 'country': ['CN'], 'dates': ['2020-01-01', '2020-12-31']}
            {'ticker': ['TMO'], 'country': ['JP'], 'dates': ['2022-01-01', '2022-12-31']}
            {'ticker': ['UTHR'], 'country': ['IT'], 'dates': ['2021-01-01', '2021-12-31']}
            {'ticker': ['UNH'], 'country': ['BR'], 'dates': ['2023-01-01', '2023-12-31']}
            {'ticker': ['VRTX'], 'country': ['DE'], 'dates': ['2020-01-01', '2020-12-31']}
            {'ticker': ['VTRS'], 'country': ['AU'], 'dates': None}        
            """

            for question in questions:
                with self.subTest(question=question):
                    # Create mock context for each question
                    context = {
                        "input": {
                            "ask": question
                        }
                    }

                    # Run the asynchronous extract_entities method
                    result = self.loop.run_until_complete(self.vsearch.extract_entities(context))

                    # Perform your assertions here
                    # For example, check if the result is a dictionary
                    self.assertIsInstance(result, dict)
                    print(result)

    def test_extract_entities_for_3M_Pfizer(self):
        question = "What was the annual revenue of 3M Company and Pfizer for the fiscal year 2021 in US?"
        context = {"input": {"ask": question}}
        expected_output = {
            "ticker": ["MMM", "PFE"],
            "country": ["US"],
            "dates": ["2021-01-01", "2021-12-31"]
        }

        # Run the asynchronous extract_entities method
        result = self.loop.run_until_complete(self.vsearch.extract_entities(context))

        # Assertions
        self.assertEqual(result.get('ticker'), expected_output['ticker'], "Ticker extraction failed")
        self.assertEqual(result.get('country'), expected_output['country'], "Country extraction failed")
        self.assertEqual(result.get('dates'), expected_output['dates'], "Dates extraction failed")

    def test_extract_entities_no_ticker(self):
        question = "What was the revenue in the USA for the fiscal year 2021?"
        context = {"input": {"ask": question}}
        expected_output = {
            "ticker": None,
            "country": ["US"],
            "dates": ["2021-01-01", "2021-12-31"]
        }
        # Run the asynchronous extract_entities method
        result = self.loop.run_until_complete(self.vsearch.extract_entities(context))
        # Assertions
        self.assertEqual(result.get('ticker'), expected_output['ticker'], "Ticker extraction failed")
        self.assertEqual(result.get('country'), expected_output['country'], "Country extraction failed")
        self.assertEqual(result.get('dates'), expected_output['dates'], "Dates extraction failed")
    
    def test_extract_entities_multiple_companies(self):
        question = "How did Pfizer, Abbott, and Johnson & Johnson perform in 2022 in China?"
        context = {"input": {"ask": question}}
        expected_output = {
            "ticker": ["PFE", "ABT", "JNJ"],
            "country": ["CN"],
            "dates": ["2022-01-01", "2022-12-31"]
        }
    
        result = self.loop.run_until_complete(self.vsearch.extract_entities(context))
        # Assertions
        self.assertEqual(result.get('ticker'), expected_output['ticker'], "Ticker extraction failed")
        self.assertEqual(result.get('country'), expected_output['country'], "Country extraction failed")
        self.assertEqual(result.get('dates'), expected_output['dates'], "Dates extraction failed")

    def test_extract_entities_month_year(self):
        question = "What were the sales of Merck in Germany in June 2020?"
        context = {"input": {"ask": question}}
        expected_output = {
            "ticker": ["MRK"],
            "country": ["DE"],
            "dates": ["2020-06-01", "2020-06-30"]
        }
        # Run the asynchronous extract_entities method and assertions
        result = self.loop.run_until_complete(self.vsearch.extract_entities(context))
        # Assertions
        self.assertEqual(result.get('ticker'), expected_output['ticker'], "Ticker extraction failed")
        self.assertEqual(result.get('country'), expected_output['country'], "Country extraction failed")
        self.assertEqual(result.get('dates'), expected_output['dates'], "Dates extraction failed")

    def test_extract_entities_no_country(self):
        question = "What was Eli Lilly's revenue for Q1 2021?"
        context = {"input": {"ask": question}}
        expected_output = {
            "ticker": ["LLY"],
            "country": None,
            "dates": ["2021-01-01", "2021-03-31"]
        }
        # Run the asynchronous extract_entities method and assertions
        result = self.loop.run_until_complete(self.vsearch.extract_entities(context))
        # Assertions
        self.assertEqual(result.get('ticker'), expected_output['ticker'], "Ticker extraction failed")
        self.assertEqual(result.get('country'), expected_output['country'], "Country extraction failed")
        self.assertEqual(result.get('dates'), expected_output['dates'], "Dates extraction failed")

    def test_extract_entities_quarter_year(self):
        question = "Quarterly profit of General Electric in Q3 2019?"
        context = {"input": {"ask": question}}
        expected_output = {
            "ticker": ["GE"],
            "country": None,
            "dates": ["2019-07-01", "2019-09-30"]
        }
        result = self.loop.run_until_complete(self.vsearch.extract_entities(context))
        # Assertions
        self.assertEqual(result.get('ticker'), expected_output['ticker'], "Ticker extraction failed")
        self.assertEqual(result.get('country'), expected_output['country'], "Country extraction failed")
        self.assertEqual(result.get('dates'), expected_output['dates'], "Dates extraction failed")
    
    def test_extract_entities_abbreviated_ticker(self):
        question = "How did Honeywell perform in Q4 2021 in the UK?"
        context = {"input": {"ask": question}}
        expected_output = {
            "ticker": ["HON"],
            "country": ["GB"],
            "dates": ["2021-10-01", "2021-12-31"]
        }
        # Run the asynchronous extract_entities method and assertions
        result = self.loop.run_until_complete(self.vsearch.extract_entities(context))
        # Assertions
        self.assertEqual(result.get('ticker'), expected_output['ticker'], "Ticker extraction failed")
        self.assertEqual(result.get('country'), expected_output['country'], "Country extraction failed")
        self.assertEqual(result.get('dates'), expected_output['dates'], "Dates extraction failed")


    def test_extract_entities_specific_date(self):
        question = "Sales figures for Pfizer on 15th July 2020 in Canada?"
        context = {"input": {"ask": question}}
        expected_output = {
            "ticker": ["PFE"],
            "country": ["CA"],
            "dates": ["2020-07-15", "2020-07-15"]
        }
        # Run the asynchronous extract_entities method and assertions
        result = self.loop.run_until_complete(self.vsearch.extract_entities(context))
        # Assertions
        self.assertEqual(result.get('ticker'), expected_output['ticker'], "Ticker extraction failed")
        self.assertEqual(result.get('country'), expected_output['country'], "Country extraction failed")
        self.assertEqual(result.get('dates'), expected_output['dates'], "Dates extraction failed")

    def test_extract_entities_no_date(self):
        question = "Current market capitalization of Bristol-Myers Squibb in the USA?"
        context = {"input": {"ask": question}}
        expected_output = {
            "ticker": ["BMY"],
            "country": ["US"],
            "dates": None
        }
        # Run the asynchronous extract_entities method and assertions
        result = self.loop.run_until_complete(self.vsearch.extract_entities(context))
        # Assertions
        self.assertEqual(result.get('ticker'), expected_output['ticker'], "Ticker extraction failed")
        self.assertEqual(result.get('country'), expected_output['country'], "Country extraction failed")
        self.assertEqual(result.get('dates'), expected_output['dates'], "Dates extraction failed")


    def test_extract_entities_non_standard_term(self):
        question = "R&D investment of Biogen during the first half of 2022 in Germany?"
        context = {"input": {"ask": question}}
        expected_output = {
            "ticker": ["BIIB"],
            "country": ["DE"],
            "dates": ["2022-01-01", "2022-06-30"]
        }
        # Run the asynchronous extract_entities method and assertions
        result = self.loop.run_until_complete(self.vsearch.extract_entities(context))
        # Assertions
        self.assertEqual(result.get('ticker'), expected_output['ticker'], "Ticker extraction failed")
        self.assertEqual(result.get('country'), expected_output['country'], "Country extraction failed")
        self.assertEqual(result.get('dates'), expected_output['dates'], "Dates extraction failed")

    def test_extract_entities_complex_time_frame(self):
        question = "Total assets of Johnson & Johnson at the end of Q2 2021 in France?"
        context = {"input": {"ask": question}}
        expected_output = {
            "ticker": ["JNJ"],
            "country": ["FR"],
            "dates": ["2021-04-01", "2021-06-30"]
        }
        result = self.loop.run_until_complete(self.vsearch.extract_entities(context))
        # Assertions
        self.assertEqual(result.get('ticker'), expected_output['ticker'], "Ticker extraction failed")
        self.assertEqual(result.get('country'), expected_output['country'], "Country extraction failed")
        self.assertEqual(result.get('dates'), expected_output['dates'], "Dates extraction failed")


    def tearDown(self):
        pass

if __name__ == '__main__':
    unittest.main()